<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-4.0.xsd">
    
	<!--  This is just like clean-store-data but duplicated to be used with a different table -->	
	
	
	<!-- Using properties file to replace properties in xml configuration file -->
	<bean id="jobProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="file:/opt/scrapper_geocode/googleapi.properties" />
	</bean>		
	
	<batch:job id="cleanScrapperJob">	
		<!-- Decision tasklet to decide what store index to start at -->
	    <batch:step id="partitionStep" >
			<batch:partition step="cleanUpStoreStep" partitioner="rangePartitioner">
				<batch:handler grid-size="${grid.size}" task-executor="taskExecutor" />
			</batch:partition>
	    </batch:step> 
	</batch:job>
	
	

	<batch:step id="cleanUpStoreStep">
		<batch:tasklet transaction-manager="transactionManager">
			<batch:chunk reader="storeScraperItemReader" processor="cleanStoreItemProcessor" writer="cleanStoreItemWriter" commit-interval="${commit.interval}" skip-limit="${cron.job.business.data.skip.limit}" processor-transactional="false">
    			<batch:skippable-exception-classes>
      				<batch:include class="com.api.cron.batch.task.TaskException" />
    			</batch:skippable-exception-classes>
    		</batch:chunk>

		    <batch:listeners>
				<batch:listener ref="cronStepListener" />
				<batch:listener ref="cronWriteListener" />
		    </batch:listeners>			
			
		</batch:tasklet>
	</batch:step>
	

  
	<bean id="storeScraperItemReader" class="org.springframework.batch.item.database.JdbcPagingItemReader"
		scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="queryProvider">
			<bean
				class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
				<property name="dataSource" ref="dataSource" />
				<property name="selectClause" value="select id, longitude, latitude, name, address_line_1, address_line_2, city, state, zipcode, country_code, phone, website, email, category" />
				<property name="fromClause" value="from yellowpages_data" />
				<property name="whereClause" value="where id &gt;= :fromId and id &lt;= :toId and longitude is null or latitude is null" />
				<property name="sortKey" value="id" />
			</bean>
		</property>
		<!-- Inject via the ExecutionContext in rangePartitioner -->
		<property name="parameterValues">
			<map>
				<entry key="fromId" value="#{stepExecutionContext[fromId]}" />
				<entry key="toId" value="#{stepExecutionContext[toId]}" />
			</map>
		</property>
		<property name="pageSize" value="1000" />
		<property name="rowMapper">
			<bean class="com.api.cron.batch.mapper.StoreMapper" />
		</property>
	</bean>

	<!--  Update from geolocation and google places -->
  <bean id="storeUpdateItemWriter"
	class="org.springframework.batch.item.database.JdbcBatchItemWriter">
	<property name="dataSource" ref="dataSource" />
	<property name="sql">
	  <value>
            <![CDATA[       
            	UPDATE yellowpages_data SET `longitude` = :longitude, `latitude` = :latitude WHERE `id` = :storeId; 
            ]]>
	  </value>
	</property>
	<!-- It will take care matching between object property and sql name parameter -->
	<property name="itemSqlParameterSourceProvider">
		<bean
		class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
	</property>
  </bean>


	<bean id="googleServiceFactory" class="com.api.cron.batch.task.GoogleServiceFactory">
		<constructor-arg>  
			<map>  
				<entry key="GoogleGeocodeTask" >
					<bean id="googleGeocodeTask" class="com.api.cron.batch.task.GoogleGeocodeTask" />
				</entry>			
			</map>			
		</constructor-arg> 		
	</bean>
  
  

</beans>