
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-4.0.xsd">



	<!-- Using properties file to replace properties in xml configuration file -->
	<bean id="jobProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="file:/opt/yellowpages-data/googleapi.properties" />
	</bean>	
	
	<util:map id="categories" map-class="java.util.HashMap">
    </util:map>

	<batch:job id="crawlerSiteMapJob">	
		<!-- Decision tasklet to decide what store index to start at -->

	    <batch:step id="partitionStep" next="generateMasterSitemapStep">
			<batch:partition step="generateUniqueSitemapStep" partitioner="rangePartitioner">
				<batch:handler grid-size="300" task-executor="taskExecutor" />
			</batch:partition>
	    </batch:step>
	    
		<batch:step id="generateMasterSitemapStep" next="keywordsPartitionStep">
			<batch:tasklet>
				<batch:chunk reader="sitemapDirectoryReader" writer="sitemapFileItemWriter" commit-interval="500" >
	    		</batch:chunk>
	
			    <batch:listeners>
					<batch:listener ref="cronStepListener" />
					<batch:listener ref="cronWriteListener" />
			    </batch:listeners>			
				
			</batch:tasklet>
		</batch:step>	

	    <batch:step id="keywordsPartitionStep">
			<batch:partition step="keywordsUpdateStep" partitioner="rangePartitioner">
				<batch:handler grid-size="${grid.size}" task-executor="taskExecutor" />
			</batch:partition>
	    </batch:step>
	</batch:job>





	<batch:step id="generateUniqueSitemapStep">
		<batch:tasklet>
			<batch:chunk reader="crawlerSitemapItemReader" writer="multiResourceItemWriter" commit-interval="500" processor-transactional="false">
    		</batch:chunk>

		    <batch:listeners>
				<batch:listener ref="cronStepListener" />
				<batch:listener ref="cronWriteListener" />
		    </batch:listeners>			
			
		</batch:tasklet>
	</batch:step>	
	





	<batch:step id="keywordsUpdateStep">
		<batch:tasklet>
			<batch:chunk reader="storeKeywordItemReader" writer="customKeywordItemWriter" commit-interval="${commit.interval}" skip-limit="${cron.job.static.map.skip.limit}" processor-transactional="false">
    			<!--  Skipping is safe  -->
    			<batch:skippable-exception-classes>
      				<batch:include class="com.api.cron.batch.task.TaskException" />
    			</batch:skippable-exception-classes>			
    		</batch:chunk>

		    <batch:listeners>
				<batch:listener ref="cronStepListener" />
				<batch:listener ref="cronWriteListener" />
		    </batch:listeners>			
			
		</batch:tasklet>
	</batch:step>	
	

	<!-- Load it all into memory  -->
	<bean id="storeIdItemReader" class="org.springframework.batch.item.database.JdbcPagingItemReader"
		scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="queryProvider">
			<bean
				class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
				<property name="dataSource" ref="dataSource" />
				<property name="selectClause" value="select id, longitude, latitude, name, address_line_1, address_line_2, city, state, zipcode, country_code, phone, website, email, category" />
				<property name="fromClause" value="from business_data" />
				<property name="whereClause" value="where id &gt;= :fromId and id &lt;= :toId" />
				<property name="sortKey" value="id" />
			</bean>
		</property>
		<!-- Inject via the ExecutionContext in rangePartitioner -->
		<property name="parameterValues">
			<map>
				<entry key="fromId" value="#{stepExecutionContext[fromId]}" />
				<entry key="toId" value="#{stepExecutionContext[toId]}" />
			</map>
		</property>
		<property name="pageSize" value="1000" />
		<property name="rowMapper">
			<bean class="com.api.cron.batch.mapper.StoreMapper" />
		</property>
	</bean>
	
	
	<!-- Load it all into memory  -->
	<bean id="crawlerSitemapItemReader" class="org.springframework.batch.item.database.JdbcPagingItemReader"
		scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="queryProvider">
			<bean
				class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
				<property name="dataSource" ref="dataSource" />
				<property name="selectClause" value="select id, name, address_line_1, address_line_2, city, state, zipcode, country_code" />
				<property name="fromClause" value="from business_data" />
				<property name="whereClause" value="where id &gt;= :fromId and id &lt;= :toId" />
				<property name="sortKey" value="id" />
			</bean>
		</property>   
		<!-- Inject via the ExecutionContext in rangePartitioner -->
		<property name="parameterValues">
			<map>
				<entry key="fromId" value="#{stepExecutionContext[fromId]}" />
				<entry key="toId" value="#{stepExecutionContext[toId]}" />
			</map>
		</property>		
		<property name="pageSize" value="1000" />
		<property name="rowMapper">
			<bean class="com.api.cron.batch.jobs.sitemap.SitemapMapper" />
		</property>
	</bean>
		
		
		
  
	<bean id="sitemapFileItemWriter" 
                class="org.springframework.batch.item.xml.StaxEventItemWriter"  scope="step">
        <property name="resource" value="file:/opt/sitemaps/sitemap/sitemap.xml" />
		<property name="marshaller" ref="sitemapFileUnmarshaller" />

	    <property name="overwriteOutput" value="true" />
	    <property name="rootTagName" value="{http://www.sitemaps.org/schemas/sitemap/0.9}sitemapindex" />
	</bean>	
	
	
	
	
	<bean id="sitemapFileUnmarshaller" 
                class="org.springframework.oxm.xstream.XStreamMarshaller"  scope="step">
		<property name="aliases">
			<util:map id="aliases">
				<entry key="sitemap" value="com.api.cron.batch.jobs.sitemap.SitemapFile" />
			</util:map>
		</property>
	</bean>		
	
	
	   



	<!--  Generates sitemap.xml content -->
    <bean id="multiResourceItemWriter" class="org.springframework.batch.item.file.MultiResourceItemWriter" scope="step">
        <property name="resource" value="file:/opt/sitemaps/sitemap/sitemap-#{stepExecutionContext[threadId]}" />
        <property name="delegate" ref="sitemapItemWriter"/>
        <property name="itemCountLimitPerResource" value="50000"/>
        <property name="resourceSuffixCreator" ref="xmlResourceSuffixCreator" />
    </bean>	
	
	
	
	
	<bean id="sitemapItemWriter" 
                class="org.springframework.batch.item.xml.StaxEventItemWriter" scope="step">
		<property name="marshaller" ref="sitemapUnmarshaller" />
	    <property name="overwriteOutput" value="true" />
	    <property name="rootTagName" value="{http://www.sitemaps.org/schemas/sitemap/0.9}urlset" />
	</bean>
	
	
	<bean id="sitemapUnmarshaller" 
                class="org.springframework.oxm.xstream.XStreamMarshaller" scope="step">
		<property name="aliases">
			<util:map id="aliases">
				<entry key="url" value="com.api.cron.batch.jobs.sitemap.XmlUrl" />
			</util:map>
		</property>
	</bean>	




  <bean id="storeKeywordUpdateItemWriter"
	class="org.springframework.batch.item.database.JdbcBatchItemWriter">
	<property name="dataSource" ref="dataSource" />
	<property name="sql">
	  <value>
            <![CDATA[       
            	UPDATE business_data SET `key_words` = :keyWords, `public_store_key` = :publicStoreKey WHERE `id` = :storeId; 
            ]]>
	  </value>
	</property>
	<!-- It will take care matching between object property and sql name parameter -->
	<property name="itemSqlParameterSourceProvider">
		<bean
		class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
	</property>
  </bean>


</beans>
