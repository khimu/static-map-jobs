<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-4.0.xsd">




	<!-- Using properties file to replace properties in xml configuration file -->
	<bean id="jobProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="file:/opt/static-maps/googleapi.properties" />
	</bean>		
	


	<batch:job id="staticMapJob">	
		<!-- Decision tasklet to decide what store index to start at -->
	    <batch:step id="partitionStep" next="recordJobStep">
			<batch:partition step="storeMapStep" partitioner="rangePartitioner">
				<batch:handler grid-size="${grid.size}" task-executor="taskExecutor" />
			</batch:partition>
	    </batch:step>
	    <batch:step id="recordJobStep">
	    	<batch:tasklet ref="recordStateTasklet" />
	    </batch:step>
	</batch:job>
	
	

	<batch:step id="storeMapStep">
		<batch:tasklet >
			<batch:chunk reader="customStaticMapItemReader" processor="staticMapItemProcessor" writer="staticMapWriter" commit-interval="${commit.interval}" processor-transactional="false" skip-limit="${cron.job.static.map.skip.limit}"> <!--   retry-limit="3"> -->
    			
    			<!-- <batch:retryable-exception-classes>
      				<batch:include class="java.net.SocketException" />
      				<batch:include class="org.springframework.web.client.RestClientException"/>
    			</batch:retryable-exception-classes> -->
    			<!--  Skipping is safe  -->
    			
    			<batch:skippable-exception-classes>
      				<batch:include class="com.api.cron.batch.task.TaskException" />
      				<batch:include class="com.api.cron.batch.SkippableException" />
    			</batch:skippable-exception-classes>
    		</batch:chunk>
    		

		    <batch:listeners>
				<batch:listener ref="cronStepListener" />
				<batch:listener ref="cronWriteListener" />
		    </batch:listeners>			
			
		</batch:tasklet>
	</batch:step>
	
	


	<!-- Load it all into memory  -->
	<bean id="pagingItemReader" class="org.springframework.batch.item.database.JdbcPagingItemReader"
		scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="queryProvider">
			<bean
				class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
				<property name="dataSource" ref="dataSource" />
				<property name="selectClause" value="select id, longitude, latitude" />
				<property name="fromClause" value="from business_data" />
				<property name="whereClause" value="where id &gt;= :fromId and id &lt;= :toId" />
				<property name="sortKey" value="id" />
			</bean>
		</property>
		<!-- Inject via the ExecutionContext in rangePartitioner -->
		<property name="parameterValues">
			<map>
				<entry key="fromId" value="#{stepExecutionContext[fromId]}" />
				<entry key="toId" value="#{stepExecutionContext[toId]}" />
			</map>
		</property>
		<property name="pageSize" value="1000" />
		<property name="rowMapper">
			<bean class="com.api.cron.batch.mapper.StaticMapStoreMapper" />
		</property>
	</bean>


	<bean id="s3Info" class="com.api.cron.batch.metadata.S3Info">
		<property name="bucketName" value="${s3.bucket.name}" />
		<property name="s3Host" value="${s3.host}"/>
	</bean>

	<bean id="clientConfiguration" class="com.amazonaws.ClientConfiguration">
		<property name="connectionTimeout" value="${s3.connection.timeout}"/>
		<property name="socketTimeout" value="${s3.socket.timeout}" />
		<property name="maxErrorRetry" value="${s3.retry}"/>
		<property name="connectionTTL" value="${s3.connection.ttl}"/>
		<property name="maxConnections" value="${s3.max.connection.pool}" />
	</bean>		
		
	<bean id="amazonCredentials" class="com.amazonaws.auth.BasicAWSCredentials">
		<constructor-arg index="0" value="" /><!-- AKIAI3UTLM74PPVHJ6WQ" /> -->
		<constructor-arg index="1" value="" /><!-- yDxSzsa2esaBQOQQd+tNIHX7yvcf4vGeBKg8MO35" /> -->
	</bean>
	
	<bean id="s3Client" class="com.amazonaws.services.s3.AmazonS3Client">
		<constructor-arg index="0" ref="amazonCredentials"/>
		<constructor-arg index="1" ref="clientConfiguration"/>
	</bean>
	
	<bean id="transferManager" class="com.amazonaws.services.s3.transfer.TransferManager" destroy-method="shutdownNow">
		<constructor-arg index="0" ref="s3Client"/>
	</bean>
	
	<bean id="googleServiceFactory" class="com.api.cron.batch.task.GoogleServiceFactory">
		<constructor-arg>  
			<map>  
				<entry key="S3ResourceExistTask" >
					<bean class="com.api.cron.batch.task.S3ResourceExistTask" >
						<property name="s3Client" ref="s3Client"/>
					</bean>
				</entry>
				<entry key="GoogleDownloadTask" >
					<bean class="com.api.cron.batch.task.GoogleDownloadTask" ></bean>
				</entry>				
				<entry key="S3UploadTask" >
					<bean class="com.api.cron.batch.task.S3UploadTask" >
						<property name="transferManager" ref="transferManager"/>
					</bean>
				</entry>
				<entry key="GoogleGeocodeTask" >
					<bean id="googleGeocodeTask" class="com.api.cron.batch.task.GoogleGeocodeTask" />
				</entry>
				<entry key="GooglePlacesTask" >
					<bean id="googlePlacesTask" class="com.api.cron.batch.task.GooglePlacesTask" />
				</entry>				
			</map>			
		</constructor-arg> 		
	</bean>
</beans>